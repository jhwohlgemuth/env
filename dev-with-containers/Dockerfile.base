ARG BASE=bitnami/minideb
ARG TAG=bullseye
ARG IMAGE=$BASE:$TAG
FROM $IMAGE

LABEL author="Jason Wohlgemuth"
LABEL org.opencontainers.image.source https://github.com/jhwohlgemuth/env
#
# Configure environment variables
#
ENV TZ America/New_York
ENV TERM xterm-256color
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
#
# Install system dependencies
#
WORKDIR /root
SHELL ["/bin/bash", "-c"]
ARG DEBIAN_FRONTEND=noninteractive
COPY ./provision/scripts/install_dependencies.sh .
RUN chmod +x ./install_dependencies.sh \
    && ./install_dependencies.sh \
    && rm ./install_dependencies.sh
#
# Install and configure oh-my-zsh
#
WORKDIR /root
SHELL ["/bin/bash", "-c"]
COPY ./config/.p10k.zsh /root/.p10k.zsh
COPY ./provision/scripts/install_ohmyzsh.sh .
RUN chmod +x ./install_ohmyzsh.sh \
    && ./install_ohmyzsh.sh \
    && rm ./install_ohmyzsh.sh
#
# Configure NeoVim
#
SHELL ["/bin/bash", "-c"]
ENV NEOVIM_ROOT /root/.config/nvim/
COPY ./provision/neovim/init.vim $NEOVIM_ROOT
COPY ./provision/neovim/coc-settings.json $NEOVIM_ROOT
COPY ./provision/neovim/general/settings.vim "${NEOVIM_ROOT}general/"
COPY ./provision/neovim/general/plugins.vim "${NEOVIM_ROOT}general/"
COPY ./provision/neovim/plug-config/coc.vim "${NEOVIM_ROOT}plug-config/"
COPY ./provision/neovim/plug-config/fzf.vim "${NEOVIM_ROOT}plug-config/"
COPY ./provision/neovim/plug-config/which-key.vim "${NEOVIM_ROOT}plug-config/"
COPY ./provision/neovim/themes/onedark.vim "${NEOVIM_ROOT}themes/"
RUN find $NEOVIM_ROOT -name "*.vim" | xargs dos2unix
#
# Install Homebrew
#
WORKDIR /root
SHELL ["/bin/bash", "-c"]
COPY ./provision/scripts/install_homebrew.sh .
RUN chmod +x ./install_homebrew.sh \
    && ./install_homebrew.sh \
    && rm ./install_homebrew.sh
#
# Install miniconda (Conda) and Mamba
#
WORKDIR /root
SHELL ["/bin/bash", "-c"]
COPY ./provision/scripts/install_conda.sh .
ENV CONDA_DIR /opt/conda
ENV PATH "${PATH}:${CONDA_DIR}/bin"
RUN chmod +x ./install_conda.sh \
    && ./install_conda.sh \
    && rm ./install_conda.sh
#
# Install nvm (Node.js)
#
SHELL ["/bin/bash", "-c"]
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
ENV PATH "${PATH}:/root/bin"
ENV NVM_DIR /root/.nvm
ENV NODE_OPTIONS "--max-old-space-size=8192"
RUN echo ". ${NVM_DIR}/nvm.sh" >> "${HOME}/.zshrc"
#
# Install .NET and PowerShell
#
WORKDIR /root
SHELL ["/bin/bash", "-c"]
ARG DEBIAN_FRONTEND=noninteractive
COPY ./provision/scripts/install_dotnet.sh .
RUN chmod +x ./install_dotnet.sh \
    && ./install_dotnet.sh \
    && rm ./install_dotnet.sh
#
# Install and configure oh-my-posh
#
WORKDIR /root
SHELL ["/usr/bin/pwsh", "-Command"]
COPY ./config/.theme.omp.json .
COPY ./config/profile.ps1 .
COPY ./provision/scripts/Install-OhMyPosh.ps1 .
RUN ./Install-OhMyPosh.ps1 && rm ./Install-OhMyPosh.ps1
#
# Install s6-overlay
SHELL ["/bin/bash", "-c"]
ARG S6_OVERLAY_VERSION=3.1.5.0
ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz /tmp
ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-x86_64.tar.xz /tmp
RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz
RUN tar -C / -Jxpf /tmp/s6-overlay-x86_64.tar.xz
#
# Add s6 symlinks
#
SHELL ["/bin/bash", "-c"]
ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-symlinks-noarch.tar.xz /tmp
ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-symlinks-arch.tar.xz /tmp
RUN tar -C / -Jxpf /tmp/s6-overlay-symlinks-noarch.tar.xz \
    && tar -C / -Jxpf /tmp/s6-overlay-symlinks-arch.tar.xz
#
# Cleanup
#
WORKDIR /root
SHELL ["/bin/bash", "-c"]
COPY ./provision/scripts/cleanup.sh .
RUN chmod +x ./cleanup.sh \
    && ./cleanup.sh \
    && rm ./cleanup.sh

WORKDIR /root/dev
ENTRYPOINT [ "/init" ]
CMD ["/bin/zsh"]