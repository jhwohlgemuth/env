FROM jhwohlgemuth/env

LABEL author="Jason Wohlgemuth"

EXPOSE 4669

# Install and Configure Jupyter server
WORKDIR /root
ENV JUPYTER_ROOT /root/.jupyter
ENV CERTS_DIR /root/certs
RUN mkdir -p /root/dev/notebooks && mkdir -p "${JUPYTER_ROOT}/custom" && mkdir -p $CERTS_DIR
COPY ./dev-with-docker/jupyter/jupyter_notebook_config.py $JUPYTER_ROOT
COPY ./dev-with-docker/jupyter/custom.css "${JUPYTER_ROOT}/custom"
COPY ./dev-with-docker/jupyter/ca.cnf $CERTS_DIR
WORKDIR $CERTS_DIR
RUN openssl req -new -x509 -days 365 -out my.pem -config ca.cnf
WORKDIR /root
RUN pip install --upgrade pip && pip install --no-cache-dir \
        autopep8 \
        ipychart \
        ipyparallel \
        jill \
        jupyter \
        jupyterlab \
        jupyter_contrib_nbextensions \
        jupyter-manim \
        jupyter-tabnine \
        jut \
        kotlin-jupyter-kernel \
        manim \
        # Turtle
        mobilechelonian \
        pyspark \
        yapf \
    && pip install --upgrade --no-cache-dir Pygments \
    # Coq
    && pip install --no-cache-dir coq-jupyter && python -m coq_jupyter.install \
    # Jupyter Extension Configuration
    && jupyter contrib nbextension install --user \
    && jupyter nbextension install --py jupyter_tabnine --user \
    # && jupyter nbextension enable code_prettify/code_prettify --user \
    && jupyter nbextension enable --py jupyter_tabnine --user \
    && jupyter serverextension enable --py jupyter_tabnine --user
WORKDIR /usr/local/share/jupyter/kernels/coq
COPY ./dev-with-docker/jupyter/logo_coq.png logo-64x64.png
#
# .NET (C#, F#, and PowerShell)
#
WORKDIR /root
ENV PATH "${PATH}:/root/.dotnet/tools"
RUN dotnet tool install --global Microsoft.dotnet-interactive && dotnet interactive jupyter install
#
# Clojure
#
WORKDIR /root
RUN git clone https://github.com/clojupyter/clojupyter.git \
    && cd clojupyter \
    && git checkout master \
    && git submodule update --init
ENV PATH "${PATH}:/root/.sdkman/candidates/leiningen/current/bin:/root/.sdkman/candidates/java/current/bin/"
WORKDIR /root/clojupyter
RUN git checkout 0.2.2 \
    && make install \
    && cd .. \
    && rm -rf clojupyter
WORKDIR /root/.local/share/jupyter/kernels/clojupyter
COPY ./dev-with-docker/jupyter/logo_clojure.png logo-64x64.png
#
# Elixir
# Note: Includes temporary fix that can be removed after https://github.com/pprzetacznik/IElixir/pull/60 is merged
#
WORKDIR /opt
RUN git clone https://github.com/pprzetacznik/IElixir.git
WORKDIR /opt/IElixir
ENV PATH "${PATH}:/root/kerl/${ERL_VERSION}/bin"
ENV PATH "${PATH}:/root/.kiex/elixirs/elixir-${ELIXIR_VERSION}/bin"
RUN . "/root/kerl/${ERL_VERSION}"/activate \
    && mix local.hex --force \
    && mix local.rebar --force \
    && mix deps.get \
    && mix deps.compile \
    && sed -i 's/python/python3/g' install_script.sh \
    && ./install_script.sh
#
# Go
#
WORKDIR /root
RUN env GO111MODULE=off go get -tags zmq_4_x -d -u github.com/gopherdata/gophernotes \
    && cd "$(go env GOPATH)"/src/github.com/gopherdata/gophernotes \
    && env GO111MODULE=on go install \
    && mkdir -p ~/.local/share/jupyter/kernels/gophernotes \
    && cp kernel/* ~/.local/share/jupyter/kernels/gophernotes
WORKDIR /root/.local/share/jupyter/kernels/gophernotes
RUN chmod +w ./kernel.json \
    && sed "s|gophernotes|$(go env GOPATH)/bin/gophernotes|" < kernel.json.in > kernel.json
#
# Julia, R, and Rust
#
WORKDIR /root
RUN jill install --confirm && julia -e 'using Pkg;Pkg.add("IJulia")' \
    && R -e "install.packages('IRkernel')" && R -e "IRkernel::installspec()" \
    && cargo install evcxr_jupyter && evcxr_jupyter --install
#
# Ruby
#
WORKDIR /root
RUN gem install --user-install iruby && iruby register --force
# 
# Haskell
# 
WORKDIR /opt
ENV PATH "${PATH}:/root/.local/bin"
RUN git clone https://github.com/gibiansky/IHaskell
WORKDIR /opt/IHaskell
RUN stack setup \
    && stack build ihaskell --only-snapshot \
    && stack install ihaskell --local-bin-path ./bin/ \
    && ./bin/ihaskell install --stack
#
# Lua
#
WORKDIR /root
RUN conda install -c conda-forge mamba && mamba install -c conda-forge xeus-lua --yes
#
# Scala
#
WORKDIR /opt
RUN curl -Lo coursier https://git.io/coursier-cli \
    && chmod +x coursier \
    && ./coursier launch --fork almond:0.11.1 --scala 2.13 -- --install \
    && rm -f coursier
#
# Swift
#
ENV SWIFT_TENSORFLOW_PATH /usr/lib/swift-tensorflow-toolchain
ENV SWIFT_TENSORFLOW_URL https://storage.googleapis.com/swift-tensorflow-artifacts/releases/v0.13/swift-tensorflow-RELEASE-0.13-ubuntu20.04.tar.gz
WORKDIR ${SWIFT_TENSORFLOW_PATH}
RUN mkdir usr \
    && curl -o swift.tar.gz ${SWIFT_TENSORFLOW_URL} \
    && tar -xzf swift.tar.gz --directory=usr --strip-components=1 \
    && rm swift.tar.gz
WORKDIR /opt
RUN git clone https://github.com/google/swift-jupyter.git \
    && cd swift-jupyter \
    && python register.py --user --swift-toolchain ${SWIFT_TENSORFLOW_PATH}
ENV PATH "${PATH}:${SWIFT_TENSORFLOW_PATH}"
WORKDIR /root/.local/share/jupyter/kernels/swift
COPY ./dev-with-docker/jupyter/logo_swift.png logo-64x64.png 

WORKDIR /root/dev/notebooks

ENTRYPOINT [ "jupyter" ]
CMD [ "notebook", "--allow-root" ]